apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

if (!project.hasProperty('tmdbApiKey')) {
    throw new GradleException('no tmdbApiKey property found needed to acces the backend server. Please define this property (i.e. in ~.gradle/gradle.properties) and try to build again ')
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

android {

    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    signingConfigs {
        release
    }

    lintOptions {
        disable 'InvalidPackage', 'GoogleAppIndexingWarning'
        textOutput 'stdout'
        textReport true
    }

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
        applicationId "de.andrestefanov.popularmovies"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 2
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "TMBD_API_KEY", "\"$tmdbApiKey\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // android support library
    compile 'com.android.support:design:25.3.0'
    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.android.support:recyclerview-v7:25.3.0'
    compile 'com.android.support:percent:25.3.0'
    compile 'com.android.support:gridlayout-v7:25.3.0'

    // fragments navigation (stacks)
    compile 'com.ncapdevi:frag-nav:1.4.0'

    // bottom navigation
    compile 'com.roughike:bottom-bar:2.1.1'

    // Content provider
    annotationProcessor 'net.simonvt.schematic:schematic-compiler:0.7.0'
    compile 'net.simonvt.schematic:schematic:0.7.0'

    // view binding
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    // rating
    compile 'me.zhanghai.android.materialratingbar:library:1.0.2'

    // mvp
    compile 'com.hannesdorfmann.mosby:viewstate:2.0.1'

    // multiline collapsible toolbar
    compile 'net.opacapp:multiline-collapsingtoolbar:1.3.1'

    // network
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    compile 'com.github.clans:fab:1.6.4'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

if (keystorePropertiesFile.canRead()) {
    // Initialize a new Properties() object called keystoreProperties.
    def keystoreProperties = new Properties()

    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    android.signingConfigs.release.keyAlias = keystoreProperties['keyAlias']
    android.signingConfigs.release.keyPassword = keystoreProperties['keyPassword']
    android.signingConfigs.release.storeFile = file(keystoreProperties['storeFile'])
    android.signingConfigs.release.storePassword = keystoreProperties['storePassword']
} else if (project.hasProperty('keystoreFile')) {
    android.signingConfigs.release.keyAlias = "$keystoreKeyAlias"
    android.signingConfigs.release.keyPassword = "$keystoreKeyPassword"
    android.signingConfigs.release.storeFile = file("$keystoreFile")
    android.signingConfigs.release.storePassword = "$keystorePassword"
} else {
    println 'signing disabled'
    android.buildTypes.release.signingConfig = null
}